{"version":3,"file":"24.ef2c5ff2d24f0bf43a98.bundle.js","sources":["webpack:///./fields/code/node_modules/brace/ext/static_highlight.js"],"sourcesContent":["ace.define(\"ace/ext/static_highlight\", [\"require\", \"exports\", \"module\", \"ace/edit_session\", \"ace/layer/text\", \"ace/config\", \"ace/lib/dom\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var EditSession = acequire(\"../edit_session\").EditSession;\n  var TextLayer = acequire(\"../layer/text\").Text;\n  var baseStyles = \".ace_static_highlight {\\\nfont-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', 'Droid Sans Mono', monospace;\\\nfont-size: 12px;\\\nwhite-space: pre-wrap\\\n}\\\n.ace_static_highlight .ace_gutter {\\\nwidth: 2em;\\\ntext-align: right;\\\npadding: 0 3px 0 0;\\\nmargin-right: 3px;\\\n}\\\n.ace_static_highlight.ace_show_gutter .ace_line {\\\npadding-left: 2.6em;\\\n}\\\n.ace_static_highlight .ace_line { position: relative; }\\\n.ace_static_highlight .ace_gutter-cell {\\\n-moz-user-select: -moz-none;\\\n-khtml-user-select: none;\\\n-webkit-user-select: none;\\\nuser-select: none;\\\ntop: 0;\\\nbottom: 0;\\\nleft: 0;\\\nposition: absolute;\\\n}\\\n.ace_static_highlight .ace_gutter-cell:before {\\\ncontent: counter(ace_line, decimal);\\\ncounter-increment: ace_line;\\\n}\\\n.ace_static_highlight {\\\ncounter-reset: ace_line;\\\n}\\\n\";\n  var config = acequire(\"../config\");\n  var dom = acequire(\"../lib/dom\");\n\n  var SimpleTextLayer = function SimpleTextLayer() {\n    this.config = {};\n  };\n\n  SimpleTextLayer.prototype = TextLayer.prototype;\n\n  var highlight = function highlight(el, opts, callback) {\n    var m = el.className.match(/lang-(\\w+)/);\n    var mode = opts.mode || m && \"ace/mode/\" + m[1];\n    if (!mode) return false;\n    var theme = opts.theme || \"ace/theme/textmate\";\n    var data = \"\";\n    var nodes = [];\n\n    if (el.firstElementChild) {\n      var textLen = 0;\n\n      for (var i = 0; i < el.childNodes.length; i++) {\n        var ch = el.childNodes[i];\n\n        if (ch.nodeType == 3) {\n          textLen += ch.data.length;\n          data += ch.data;\n        } else {\n          nodes.push(textLen, ch);\n        }\n      }\n    } else {\n      data = dom.getInnerText(el);\n      if (opts.trim) data = data.trim();\n    }\n\n    highlight.render(data, mode, theme, opts.firstLineNumber, !opts.showGutter, function (highlighted) {\n      dom.importCssString(highlighted.css, \"ace_highlight\");\n      el.innerHTML = highlighted.html;\n      var container = el.firstChild.firstChild;\n\n      for (var i = 0; i < nodes.length; i += 2) {\n        var pos = highlighted.session.doc.indexToPosition(nodes[i]);\n        var node = nodes[i + 1];\n        var lineEl = container.children[pos.row];\n        lineEl && lineEl.appendChild(node);\n      }\n\n      callback && callback();\n    });\n  };\n\n  highlight.render = function (input, mode, theme, lineStart, disableGutter, callback) {\n    var waiting = 1;\n    var modeCache = EditSession.prototype.$modes;\n\n    if (typeof theme == \"string\") {\n      waiting++;\n      config.loadModule(['theme', theme], function (m) {\n        theme = m;\n        --waiting || done();\n      });\n    }\n\n    var modeOptions;\n\n    if (mode && typeof mode === \"object\" && !mode.getTokenizer) {\n      modeOptions = mode;\n      mode = modeOptions.path;\n    }\n\n    if (typeof mode == \"string\") {\n      waiting++;\n      config.loadModule(['mode', mode], function (m) {\n        if (!modeCache[mode] || modeOptions) modeCache[mode] = new m.Mode(modeOptions);\n        mode = modeCache[mode];\n        --waiting || done();\n      });\n    }\n\n    function done() {\n      var result = highlight.renderSync(input, mode, theme, lineStart, disableGutter);\n      return callback ? callback(result) : result;\n    }\n\n    return --waiting || done();\n  };\n\n  highlight.renderSync = function (input, mode, theme, lineStart, disableGutter) {\n    lineStart = parseInt(lineStart || 1, 10);\n    var session = new EditSession(\"\");\n    session.setUseWorker(false);\n    session.setMode(mode);\n    var textLayer = new SimpleTextLayer();\n    textLayer.setSession(session);\n    session.setValue(input);\n    var stringBuilder = [];\n    var length = session.getLength();\n\n    for (var ix = 0; ix < length; ix++) {\n      stringBuilder.push(\"<div class='ace_line'>\");\n      if (!disableGutter) stringBuilder.push(\"<span class='ace_gutter ace_gutter-cell' unselectable='on'>\" +\n      /*(ix + lineStart) + */\n      \"</span>\");\n      textLayer.$renderLine(stringBuilder, ix, true, false);\n      stringBuilder.push(\"\\n</div>\");\n    }\n\n    var html = \"<div class='\" + theme.cssClass + \"'>\" + \"<div class='ace_static_highlight\" + (disableGutter ? \"\" : \" ace_show_gutter\") + \"' style='counter-reset:ace_line \" + (lineStart - 1) + \"'>\" + stringBuilder.join(\"\") + \"</div>\" + \"</div>\";\n    textLayer.destroy();\n    return {\n      css: baseStyles + theme.cssText,\n      html: html,\n      session: session\n    };\n  };\n\n  module.exports = highlight;\n  module.exports.highlight = highlight;\n});\n\n(function () {\n  ace.acequire([\"ace/ext/static_highlight\"], function () {});\n})();"],"mappings":"AAAA","sourceRoot":""}