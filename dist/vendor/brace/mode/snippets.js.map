{"version":3,"sources":["webpack:///vendor/brace/mode/snippets.js","webpack:///../node_modules/brace/mode/snippets.js"],"names":["flklrJsonp","131","module","exports","ace","define","acequire","oop","BaseFoldMode","FoldMode","Range","inherits","this","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","next","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","TextHighlightRules","SnippetHighlightRules","builtins","$rules","start","token","regex","onMatch","value","state","stack","unshift","tokenName","splice","varDecl","regexp","charClass","format","SnippetGroupHighlightRules","embedRules","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$indentWithTabs","lineCommentStart","$id"],"mappings":"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","file":"vendor/brace/mode/snippets.js","sourcesContent":["flklrJsonp([83],{\n\n/***/ 131:\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/text_highlight_rules\",\"ace/mode/folding/coffee\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SnippetHighlightRules = function() {\n\n    var builtins = \"SELECTION|CURRENT_WORD|SELECTED_TEXT|CURRENT_LINE|LINE_INDEX|\" +\n        \"LINE_NUMBER|SOFT_TABS|TAB_SIZE|FILENAME|FILEPATH|FULLNAME\";\n\n    this.$rules = {\n        \"start\" : [\n            {token:\"constant.language.escape\", regex: /\\\\[\\$}`\\\\]/},\n            {token:\"keyword\", regex: \"\\\\$(?:TM_)?(?:\" + builtins + \")\\\\b\"},\n            {token:\"variable\", regex: \"\\\\$\\\\w+\"},\n            {onMatch: function(value, state, stack) {\n                if (stack[1])\n                    stack[1]++;\n                else\n                    stack.unshift(state, 1);\n                return this.tokenName;\n            }, tokenName: \"markup.list\", regex: \"\\\\${\", next: \"varDecl\"},\n            {onMatch: function(value, state, stack) {\n                if (!stack[1])\n                    return \"text\";\n                stack[1]--;\n                if (!stack[1])\n                    stack.splice(0,2);\n                return this.tokenName;\n            }, tokenName: \"markup.list\", regex: \"}\"},\n            {token: \"doc.comment\", regex:/^\\${2}-{5,}$/}\n        ],\n        \"varDecl\" : [\n            {regex: /\\d+\\b/, token: \"constant.numeric\"},\n            {token:\"keyword\", regex: \"(?:TM_)?(?:\" + builtins + \")\\\\b\"},\n            {token:\"variable\", regex: \"\\\\w+\"},\n            {regex: /:/, token: \"punctuation.operator\", next: \"start\"},\n            {regex: /\\//, token: \"string.regex\", next: \"regexp\"},\n            {regex: \"\", next: \"start\"}\n        ],\n        \"regexp\" : [\n            {regex: /\\\\./, token: \"escape\"},\n            {regex: /\\[/, token: \"regex.start\", next: \"charClass\"},\n            {regex: \"/\", token: \"string.regex\", next: \"format\"},\n            {\"token\": \"string.regex\", regex:\".\"}\n        ],\n        charClass : [\n            {regex: \"\\\\.\", token: \"escape\"},\n            {regex: \"\\\\]\", token: \"regex.end\", next: \"regexp\"},\n            {\"token\": \"string.regex\", regex:\".\"}\n        ],\n        \"format\" : [\n            {regex: /\\\\[ulULE]/, token: \"keyword\"},\n            {regex: /\\$\\d+/, token: \"variable\"},\n            {regex: \"/[gim]*:?\", token: \"string.regex\", next: \"start\"},\n            {\"token\": \"string\", regex:\".\"}\n        ]\n    };\n};\noop.inherits(SnippetHighlightRules, TextHighlightRules);\n\nexports.SnippetHighlightRules = SnippetHighlightRules;\n\nvar SnippetGroupHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n\t\t\t{token: \"text\", regex: \"^\\\\t\", next: \"sn-start\"},\n\t\t\t{token:\"invalid\", regex: /^ \\s*/},\n            {token:\"comment\", regex: /^#.*/},\n            {token:\"constant.language.escape\", regex: \"^regex \", next: \"regex\"},\n            {token:\"constant.language.escape\", regex: \"^(trigger|endTrigger|name|snippet|guard|endGuard|tabTrigger|key)\\\\b\"}\n        ],\n\t\t\"regex\" : [\n\t\t\t{token:\"text\", regex: \"\\\\.\"},\n\t\t\t{token:\"keyword\", regex: \"/\"},\n\t\t\t{token:\"empty\", regex: \"$\", next: \"start\"}\n\t\t]\n    };\n\tthis.embedRules(SnippetHighlightRules, \"sn-\", [\n\t\t{token: \"text\", regex: \"^\\\\t\", next: \"sn-start\"},\n\t\t{onMatch: function(value, state, stack) {\n\t\t\tstack.splice(stack.length);\n\t\t\treturn this.tokenName;\n\t\t}, tokenName: \"text\", regex: \"^(?!\\t)\", next: \"start\"}\n\t])\n\t\n};\n\noop.inherits(SnippetGroupHighlightRules, TextHighlightRules);\n\nexports.SnippetGroupHighlightRules = SnippetGroupHighlightRules;\n\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = SnippetGroupHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$indentWithTabs = true;\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/snippets\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// vendor/brace/mode/snippets.js","ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/text_highlight_rules\",\"ace/mode/folding/coffee\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SnippetHighlightRules = function() {\n\n    var builtins = \"SELECTION|CURRENT_WORD|SELECTED_TEXT|CURRENT_LINE|LINE_INDEX|\" +\n        \"LINE_NUMBER|SOFT_TABS|TAB_SIZE|FILENAME|FILEPATH|FULLNAME\";\n\n    this.$rules = {\n        \"start\" : [\n            {token:\"constant.language.escape\", regex: /\\\\[\\$}`\\\\]/},\n            {token:\"keyword\", regex: \"\\\\$(?:TM_)?(?:\" + builtins + \")\\\\b\"},\n            {token:\"variable\", regex: \"\\\\$\\\\w+\"},\n            {onMatch: function(value, state, stack) {\n                if (stack[1])\n                    stack[1]++;\n                else\n                    stack.unshift(state, 1);\n                return this.tokenName;\n            }, tokenName: \"markup.list\", regex: \"\\\\${\", next: \"varDecl\"},\n            {onMatch: function(value, state, stack) {\n                if (!stack[1])\n                    return \"text\";\n                stack[1]--;\n                if (!stack[1])\n                    stack.splice(0,2);\n                return this.tokenName;\n            }, tokenName: \"markup.list\", regex: \"}\"},\n            {token: \"doc.comment\", regex:/^\\${2}-{5,}$/}\n        ],\n        \"varDecl\" : [\n            {regex: /\\d+\\b/, token: \"constant.numeric\"},\n            {token:\"keyword\", regex: \"(?:TM_)?(?:\" + builtins + \")\\\\b\"},\n            {token:\"variable\", regex: \"\\\\w+\"},\n            {regex: /:/, token: \"punctuation.operator\", next: \"start\"},\n            {regex: /\\//, token: \"string.regex\", next: \"regexp\"},\n            {regex: \"\", next: \"start\"}\n        ],\n        \"regexp\" : [\n            {regex: /\\\\./, token: \"escape\"},\n            {regex: /\\[/, token: \"regex.start\", next: \"charClass\"},\n            {regex: \"/\", token: \"string.regex\", next: \"format\"},\n            {\"token\": \"string.regex\", regex:\".\"}\n        ],\n        charClass : [\n            {regex: \"\\\\.\", token: \"escape\"},\n            {regex: \"\\\\]\", token: \"regex.end\", next: \"regexp\"},\n            {\"token\": \"string.regex\", regex:\".\"}\n        ],\n        \"format\" : [\n            {regex: /\\\\[ulULE]/, token: \"keyword\"},\n            {regex: /\\$\\d+/, token: \"variable\"},\n            {regex: \"/[gim]*:?\", token: \"string.regex\", next: \"start\"},\n            {\"token\": \"string\", regex:\".\"}\n        ]\n    };\n};\noop.inherits(SnippetHighlightRules, TextHighlightRules);\n\nexports.SnippetHighlightRules = SnippetHighlightRules;\n\nvar SnippetGroupHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n\t\t\t{token: \"text\", regex: \"^\\\\t\", next: \"sn-start\"},\n\t\t\t{token:\"invalid\", regex: /^ \\s*/},\n            {token:\"comment\", regex: /^#.*/},\n            {token:\"constant.language.escape\", regex: \"^regex \", next: \"regex\"},\n            {token:\"constant.language.escape\", regex: \"^(trigger|endTrigger|name|snippet|guard|endGuard|tabTrigger|key)\\\\b\"}\n        ],\n\t\t\"regex\" : [\n\t\t\t{token:\"text\", regex: \"\\\\.\"},\n\t\t\t{token:\"keyword\", regex: \"/\"},\n\t\t\t{token:\"empty\", regex: \"$\", next: \"start\"}\n\t\t]\n    };\n\tthis.embedRules(SnippetHighlightRules, \"sn-\", [\n\t\t{token: \"text\", regex: \"^\\\\t\", next: \"sn-start\"},\n\t\t{onMatch: function(value, state, stack) {\n\t\t\tstack.splice(stack.length);\n\t\t\treturn this.tokenName;\n\t\t}, tokenName: \"text\", regex: \"^(?!\\t)\", next: \"start\"}\n\t])\n\t\n};\n\noop.inherits(SnippetGroupHighlightRules, TextHighlightRules);\n\nexports.SnippetGroupHighlightRules = SnippetGroupHighlightRules;\n\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = SnippetGroupHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$indentWithTabs = true;\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/snippets\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/brace/mode/snippets.js\n// module id = 131\n// module chunks = 83"],"sourceRoot":""}