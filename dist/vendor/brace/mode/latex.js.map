{"version":3,"sources":["webpack:///vendor/brace/mode/latex.js","webpack:///../node_modules/brace/mode/latex.js"],"names":["flklrJsonp","78","module","exports","ace","define","acequire","oop","TextHighlightRules","LatexHighlightRules","this","$rules","start","token","regex","next","equation","defaultToken","inherits","BaseFoldMode","FoldMode","Range","TokenIterator","foldingStartMarker","foldingStopMarker","getFoldWidgetRange","session","foldStyle","row","line","doc","getLine","match","exec","latexBlock","length","latexSection","openingBracketBlock","index","closingBracketBlock","column","keywords","\\begin","\\end","stream","getCurrentToken","type","val","value","dir","getType","stepForward","stepBackward","stack","startColumn","getCurrentTokenColumn","startRow","step","level","unshift","shift","getCurrentTokenRow","startLevel","indexOf","stackDepth","endRow","test","call","prototype","TextMode","Mode","LatexFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"mappings":"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","file":"vendor/brace/mode/latex.js","sourcesContent":["flklrJsonp([127],{\n\n/***/ 78:\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/latex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LatexHighlightRules = function() {  \n\n    this.$rules = {\n        \"start\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : [\"keyword\", \"lparen\", \"variable.parameter\", \"rparen\", \"lparen\", \"storage.type\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:documentclass|usepackage|input))(?:(\\\\[)([^\\\\]]*)(\\\\]))?({)([^}]*)(})\"\n        }, {\n            token : [\"keyword\",\"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?\"\n        }, {\n            token : [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:begin|end))({)(\\\\w*)(})\"\n        }, {\n            token : \"storage.type\",\n            regex : \"\\\\\\\\[a-zA-Z]+\"\n        }, {\n            token : \"lparen\",\n            regex : \"[[({]\"\n        }, {\n            token : \"rparen\",\n            regex : \"[\\\\])}]\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\[^a-zA-Z]?\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"equation\"\n        }],\n        \"equation\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"start\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\(?:[^a-zA-Z]|[a-zA-Z]+)\"\n        }, {\n            token : \"error\", \n            regex : \"^\\\\s*$\", \n            next : \"start\" \n        }, {\n            defaultToken : \"string\"\n        }]\n\n    };\n};\noop.inherits(LatexHighlightRules, TextHighlightRules);\n\nexports.LatexHighlightRules = LatexHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\",\"ace/token_iterator\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^\\s*\\\\(begin)|(section|subsection|paragraph)\\b|{\\s*$/;\n    this.foldingStopMarker = /^\\s*\\\\(end)\\b|^\\s*}/;\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n            if (match[2])\n                return this.latexSection(session, row, match[0].length - 1);\n\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n\n    this.latexBlock = function(session, row, column) {\n        var keywords = {\n            \"\\\\begin\": 1,\n            \"\\\\end\": -1\n        };\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n            return;\n\n        var val = token.value;\n        var dir = keywords[val];\n\n        var getType = function() {\n            var token = stream.stepForward();\n            var type = token.type == \"lparen\" ?stream.stepForward().value : \"\";\n            if (dir === -1) {\n                stream.stepBackward();\n                if (type)\n                    stream.stepBackward();\n            }\n            return type;\n        };\n        var stack = [getType()];\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n                continue;\n            var level = keywords[token.value];\n            if (!level)\n                continue;\n            var type = getType();\n            if (level === dir)\n                stack.unshift(type);\n            else if (stack.shift() !== type || !stack.length)\n                break;\n        }\n\n        if (stack.length)\n            return;\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        stream.stepBackward();\n        return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n    this.latexSection = function(session, row, column) {\n        var keywords = [\"\\\\subsection\", \"\\\\section\", \"\\\\begin\", \"\\\\end\", \"\\\\paragraph\"];\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"storage.type\")\n            return;\n\n        var startLevel = keywords.indexOf(token.value);\n        var stackDepth = 0\n        var endRow = row;\n\n        while(token = stream.stepForward()) {\n            if (token.type !== \"storage.type\")\n                continue;\n            var level = keywords.indexOf(token.value);\n\n            if (level >= 2) {\n                if (!stackDepth)\n                    endRow = stream.getCurrentTokenRow() - 1;\n                stackDepth += level == 2 ? 1 : - 1;\n                if (stackDepth < 0)\n                    break\n            } else if (level >= startLevel)\n                break;\n        }\n\n        if (!stackDepth)\n            endRow = stream.getCurrentTokenRow() - 1;\n\n        while (endRow > row && !/\\S/.test(session.getLine(endRow)))\n            endRow--;\n\n        return new Range(\n            row, session.getLine(row).length,\n            endRow, session.getLine(endRow).length\n        );\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/latex_highlight_rules\",\"ace/mode/folding/latex\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar LatexHighlightRules = acequire(\"./latex_highlight_rules\").LatexHighlightRules;\nvar LatexFoldMode = acequire(\"./folding/latex\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = LatexHighlightRules;\n    this.foldingRules = new LatexFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.type = \"text\";\n    \n    this.lineCommentStart = \"%\";\n\n    this.$id = \"ace/mode/latex\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// vendor/brace/mode/latex.js","ace.define(\"ace/mode/latex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LatexHighlightRules = function() {  \n\n    this.$rules = {\n        \"start\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : [\"keyword\", \"lparen\", \"variable.parameter\", \"rparen\", \"lparen\", \"storage.type\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:documentclass|usepackage|input))(?:(\\\\[)([^\\\\]]*)(\\\\]))?({)([^}]*)(})\"\n        }, {\n            token : [\"keyword\",\"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?\"\n        }, {\n            token : [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:begin|end))({)(\\\\w*)(})\"\n        }, {\n            token : \"storage.type\",\n            regex : \"\\\\\\\\[a-zA-Z]+\"\n        }, {\n            token : \"lparen\",\n            regex : \"[[({]\"\n        }, {\n            token : \"rparen\",\n            regex : \"[\\\\])}]\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\[^a-zA-Z]?\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"equation\"\n        }],\n        \"equation\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"start\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\(?:[^a-zA-Z]|[a-zA-Z]+)\"\n        }, {\n            token : \"error\", \n            regex : \"^\\\\s*$\", \n            next : \"start\" \n        }, {\n            defaultToken : \"string\"\n        }]\n\n    };\n};\noop.inherits(LatexHighlightRules, TextHighlightRules);\n\nexports.LatexHighlightRules = LatexHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\",\"ace/token_iterator\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^\\s*\\\\(begin)|(section|subsection|paragraph)\\b|{\\s*$/;\n    this.foldingStopMarker = /^\\s*\\\\(end)\\b|^\\s*}/;\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n            if (match[2])\n                return this.latexSection(session, row, match[0].length - 1);\n\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n\n    this.latexBlock = function(session, row, column) {\n        var keywords = {\n            \"\\\\begin\": 1,\n            \"\\\\end\": -1\n        };\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n            return;\n\n        var val = token.value;\n        var dir = keywords[val];\n\n        var getType = function() {\n            var token = stream.stepForward();\n            var type = token.type == \"lparen\" ?stream.stepForward().value : \"\";\n            if (dir === -1) {\n                stream.stepBackward();\n                if (type)\n                    stream.stepBackward();\n            }\n            return type;\n        };\n        var stack = [getType()];\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n                continue;\n            var level = keywords[token.value];\n            if (!level)\n                continue;\n            var type = getType();\n            if (level === dir)\n                stack.unshift(type);\n            else if (stack.shift() !== type || !stack.length)\n                break;\n        }\n\n        if (stack.length)\n            return;\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        stream.stepBackward();\n        return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n    this.latexSection = function(session, row, column) {\n        var keywords = [\"\\\\subsection\", \"\\\\section\", \"\\\\begin\", \"\\\\end\", \"\\\\paragraph\"];\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"storage.type\")\n            return;\n\n        var startLevel = keywords.indexOf(token.value);\n        var stackDepth = 0\n        var endRow = row;\n\n        while(token = stream.stepForward()) {\n            if (token.type !== \"storage.type\")\n                continue;\n            var level = keywords.indexOf(token.value);\n\n            if (level >= 2) {\n                if (!stackDepth)\n                    endRow = stream.getCurrentTokenRow() - 1;\n                stackDepth += level == 2 ? 1 : - 1;\n                if (stackDepth < 0)\n                    break\n            } else if (level >= startLevel)\n                break;\n        }\n\n        if (!stackDepth)\n            endRow = stream.getCurrentTokenRow() - 1;\n\n        while (endRow > row && !/\\S/.test(session.getLine(endRow)))\n            endRow--;\n\n        return new Range(\n            row, session.getLine(row).length,\n            endRow, session.getLine(endRow).length\n        );\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/latex_highlight_rules\",\"ace/mode/folding/latex\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar LatexHighlightRules = acequire(\"./latex_highlight_rules\").LatexHighlightRules;\nvar LatexFoldMode = acequire(\"./folding/latex\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = LatexHighlightRules;\n    this.foldingRules = new LatexFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.type = \"text\";\n    \n    this.lineCommentStart = \"%\";\n\n    this.$id = \"ace/mode/latex\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/brace/mode/latex.js\n// module id = 78\n// module chunks = 127"],"sourceRoot":""}