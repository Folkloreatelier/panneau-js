{"version":3,"file":"39.ef2c5ff2d24f0bf43a98.bundle.js","sources":["webpack:///./fields/code/node_modules/brace/mode/bro.js"],"sourcesContent":["ace.define(\"ace/mode/bro_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var BroHighlightRules = function BroHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: \"punctuation.definition.comment.bro\",\n        regex: /#/,\n        push: [{\n          token: \"comment.line.number-sign.bro\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.line.number-sign.bro\"\n        }]\n      }, {\n        token: \"keyword.control.bro\",\n        regex: /\\b(?:break|case|continue|else|for|if|return|switch|next|when|timeout|schedule)\\b/\n      }, {\n        token: [\"meta.function.bro\", \"meta.function.bro\", \"storage.type.bro\", \"meta.function.bro\", \"entity.name.function.bro\", \"meta.function.bro\"],\n        regex: /^(\\s*)(?:function|hook|event)(\\s*)(.*)(\\s*\\()(.*)(\\).*$)/\n      }, {\n        token: \"storage.type.bro\",\n        regex: /\\b(?:bool|enum|double|int|count|port|addr|subnet|any|file|interval|time|string|table|vector|set|record|pattern|hook)\\b/\n      }, {\n        token: \"storage.modifier.bro\",\n        regex: /\\b(?:global|const|redef|local|&(?:optional|rotate_interval|rotate_size|add_func|del_func|expire_func|expire_create|expire_read|expire_write|persistent|synchronized|encrypt|mergeable|priority|group|type_column|log|error_handler))\\b/\n      }, {\n        token: \"keyword.operator.bro\",\n        regex: /\\s*(?:\\||&&|(?:>|<|!)=?|==)\\s*|\\b!?in\\b/\n      }, {\n        token: \"constant.language.bro\",\n        regex: /\\b(?:T|F)\\b/\n      }, {\n        token: \"constant.numeric.bro\",\n        regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:\\/(?:tcp|udp|icmp)|\\s*(?:u?sec|min|hr|day)s?)?\\b/\n      }, {\n        token: \"punctuation.definition.string.begin.bro\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.bro\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          include: \"#string_escaped_char\"\n        }, {\n          include: \"#string_placeholder\"\n        }, {\n          defaultToken: \"string.quoted.double.bro\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.bro\",\n        regex: /\\//,\n        push: [{\n          token: \"punctuation.definition.string.end.bro\",\n          regex: /\\//,\n          next: \"pop\"\n        }, {\n          include: \"#string_escaped_char\"\n        }, {\n          include: \"#string_placeholder\"\n        }, {\n          defaultToken: \"string.quoted.regex.bro\"\n        }]\n      }, {\n        token: [\"meta.preprocessor.bro.load\", \"keyword.other.special-method.bro\"],\n        regex: /^(\\s*)(\\@load(?:-sigs)?)\\b/,\n        push: [{\n          token: [],\n          regex: /(?=\\#)|$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"meta.preprocessor.bro.load\"\n        }]\n      }, {\n        token: [\"meta.preprocessor.bro.if\", \"keyword.other.special-method.bro\", \"meta.preprocessor.bro.if\"],\n        regex: /^(\\s*)(\\@endif|\\@if(?:n?def)?)(.*$)/,\n        push: [{\n          token: [],\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"meta.preprocessor.bro.if\"\n        }]\n      }],\n      \"#disabled\": [{\n        token: \"text\",\n        regex: /^\\s*\\@if(?:n?def)?\\b.*$/,\n        push: [{\n          token: \"text\",\n          regex: /^\\s*\\@endif\\b.*$/,\n          next: \"pop\"\n        }, {\n          include: \"#disabled\"\n        }, {\n          include: \"#pragma-mark\"\n        }],\n        comment: \"eat nested preprocessor ifdefs\"\n      }],\n      \"#preprocessor-rule-other\": [{\n        token: [\"text\", \"meta.preprocessor.bro\", \"meta.preprocessor.bro\", \"text\"],\n        regex: /^(\\s*)(@if)((?:n?def)?)\\b(.*?)(?:(?=)|$)/,\n        push: [{\n          token: [\"text\", \"meta.preprocessor.bro\", \"text\"],\n          regex: /^(\\s*)(@endif)\\b(.*$)/,\n          next: \"pop\"\n        }, {\n          include: \"$base\"\n        }]\n      }],\n      \"#string_escaped_char\": [{\n        token: \"constant.character.escape.bro\",\n        regex: /\\\\(?:\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2})/\n      }, {\n        token: \"invalid.illegal.unknown-escape.bro\",\n        regex: /\\\\./\n      }],\n      \"#string_placeholder\": [{\n        token: \"constant.other.placeholder.bro\",\n        regex: /%(?:\\d+\\$)?[#0\\- +']*[,;:_]?(?:-?\\d+|\\*(?:-?\\d+\\$)?)?(?:\\.(?:-?\\d+|\\*(?:-?\\d+\\$)?)?)?(?:hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?[diouxXDOUeEfFgGaACcSspn%]/\n      }, {\n        token: \"invalid.illegal.placeholder.bro\",\n        regex: /%/\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  BroHighlightRules.metaData = {\n    fileTypes: [\"bro\"],\n    foldingStartMarker: \"^(\\\\@if(n?def)?)\",\n    foldingStopMarker: \"^\\\\@endif\",\n    keyEquivalent: \"@B\",\n    name: \"Bro\",\n    scopeName: \"source.bro\"\n  };\n  oop.inherits(BroHighlightRules, TextHighlightRules);\n  exports.BroHighlightRules = BroHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/bro\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/bro_highlight_rules\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var BroHighlightRules = acequire(\"./bro_highlight_rules\").BroHighlightRules;\n  var FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = BroHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/bro\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"mappings":"AAAA","sourceRoot":""}