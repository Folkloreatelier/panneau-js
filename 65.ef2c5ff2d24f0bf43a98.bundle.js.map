{"version":3,"file":"65.ef2c5ff2d24f0bf43a98.bundle.js","sources":["webpack:///./fields/code/node_modules/brace/mode/gherkin.js"],"sourcesContent":["ace.define(\"ace/mode/gherkin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n  var GherkinHighlightRules = function GherkinHighlightRules() {\n    var languages = [{\n      name: \"en\",\n      labels: \"Feature|Background|Scenario(?: Outline)?|Examples\",\n      keywords: \"Given|When|Then|And|But\"\n    }];\n    var labels = languages.map(function (l) {\n      return l.labels;\n    }).join(\"|\");\n    var keywords = languages.map(function (l) {\n      return l.keywords;\n    }).join(\"|\");\n    this.$rules = {\n      start: [{\n        token: \"constant.numeric\",\n        regex: \"(?:(?:[1-9]\\\\d*)|(?:0))\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"keyword\",\n        regex: \"(?:\" + labels + \"):|(?:\" + keywords + \")\\\\b\"\n      }, {\n        token: \"keyword\",\n        regex: \"\\\\*\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: '\"',\n        next: \"qqstring\"\n      }, {\n        token: \"text\",\n        regex: \"^\\\\s*(?=@[\\\\w])\",\n        next: [{\n          token: \"text\",\n          regex: \"\\\\s+\"\n        }, {\n          token: \"variable.parameter\",\n          regex: \"@[\\\\w]+\"\n        }, {\n          token: \"empty\",\n          regex: \"\",\n          next: \"start\"\n        }]\n      }, {\n        token: \"comment\",\n        regex: \"<[^>]+>\"\n      }, {\n        token: \"comment\",\n        regex: \"\\\\|(?=.)\",\n        next: \"table-item\"\n      }, {\n        token: \"comment\",\n        regex: \"\\\\|$\",\n        next: \"start\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"table-item\": [{\n        token: \"comment\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        regex: /\\|/\n      }, {\n        token: \"string\",\n        regex: /\\\\./\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(GherkinHighlightRules, TextHighlightRules);\n  exports.GherkinHighlightRules = GherkinHighlightRules;\n});\nace.define(\"ace/mode/gherkin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/gherkin_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var GherkinHighlightRules = acequire(\"./gherkin_highlight_rules\").GherkinHighlightRules;\n\n  var Mode = function Mode() {\n    this.HighlightRules = GherkinHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gherkin\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var space2 = \"  \";\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      console.log(state);\n\n      if (line.match(\"[ ]*\\\\|\")) {\n        indent += \"| \";\n      }\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        if (line.match(\"Scenario:|Feature:|Scenario Outline:|Background:\")) {\n          indent += space2;\n        } else if (line.match(\"(Given|Then).+(:)$|Examples:\")) {\n          indent += space2;\n        } else if (line.match(\"\\\\*.+\")) {\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"mappings":"AAAA","sourceRoot":""}