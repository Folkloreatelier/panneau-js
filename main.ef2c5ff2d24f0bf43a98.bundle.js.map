{"version":3,"file":"main.ef2c5ff2d24f0bf43a98.bundle.js","sources":["webpack:///./packages/core/src/lib/ComponentsCollection.js"],"sourcesContent":["class ComponentsCollection {\n    static normalizeKey(key) {\n        return key.replace(/[^A-Za-z0-9.]/gi, '').toLowerCase();\n    }\n\n    constructor(components) {\n        this.components = {};\n        this.addComponents(components || {});\n    }\n\n    addComponent(key, Component, namespace) {\n        const componentKey = ComponentsCollection.normalizeKey((\n            `${typeof namespace !== 'undefined' ? `${namespace}.` : ''}${key}`\n        ));\n        this.components[componentKey] = Component;\n    }\n\n    addComponents(components, namespace) {\n        const items = components instanceof ComponentsCollection\n            ? components.getComponents() : components;\n        Object.keys(items).forEach((key) => {\n            this.addComponent(key, items[key], namespace);\n        });\n    }\n\n    getCollection(namespace) {\n        const components = this.getComponents(namespace);\n        const collection = new ComponentsCollection(components);\n        return collection;\n    }\n\n    getComponents(namespace) {\n        return Object.keys(this.components).reduce((components, key) => {\n            if (typeof namespace !== 'undefined') {\n                // eslint-disable-next-line no-useless-escape\n                const matches = key.match(new RegExp(`^${namespace}\\.(.*)$`));\n                return matches ? {\n                    ...components,\n                    [matches[1]]: this.components[key],\n                } : components;\n            }\n            return {\n                ...components,\n                [key]: this.components[key],\n            };\n        }, {});\n    }\n\n    setComponents(components, namespace) {\n        const items = components instanceof ComponentsCollection\n            ? components.getComponents() : components;\n        if (typeof namespace !== 'undefined') {\n            Object.keys(items).forEach((key) => {\n                this.components[`${namespace}.${key}`] = items[key];\n            });\n        } else {\n            this.components = items;\n        }\n        return this;\n    }\n\n    getComponent(key) {\n        const normalizedKey = ComponentsCollection.normalizeKey(key);\n        const foundKey = Object.keys(this.components).find(fieldKey => fieldKey === normalizedKey);\n        return typeof foundKey !== 'undefined' && foundKey !== null ? this.components[foundKey] : null;\n    }\n}\n\n\nexport default ComponentsCollection;\n"],"mappings":"AAqEA","sourceRoot":""}