{"version":3,"file":"42.ef2c5ff2d24f0bf43a98.bundle.js","sources":["webpack:///./fields/code/node_modules/brace/mode/cirru.js"],"sourcesContent":["ace.define(\"ace/mode/cirru_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CirruHighlightRules = function CirruHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'constant.numeric',\n        regex: /[\\d\\.]+/\n      }, {\n        token: 'comment.line.double-dash',\n        regex: /--/,\n        next: 'comment'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\(/\n      }, {\n        token: 'storage.modifier',\n        regex: /,/,\n        next: 'line'\n      }, {\n        token: 'support.function',\n        regex: /[^\\(\\)\"\\s]+/,\n        next: 'line'\n      }, {\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'string'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\)/\n      }],\n      comment: [{\n        token: 'comment.line.double-dash',\n        regex: / +[^\\n]+/,\n        next: 'start'\n      }],\n      string: [{\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'line'\n      }, {\n        token: 'constant.character.escape',\n        regex: /\\\\/,\n        next: 'escape'\n      }, {\n        token: 'string.quoted.double',\n        regex: /[^\\\\\"]+/\n      }],\n      escape: [{\n        token: 'constant.character.escape',\n        regex: /./,\n        next: 'string'\n      }],\n      line: [{\n        token: 'constant.numeric',\n        regex: /[\\d\\.]+/\n      }, {\n        token: 'markup.raw',\n        regex: /^\\s*/,\n        next: 'start'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\$/,\n        next: 'start'\n      }, {\n        token: 'variable.parameter',\n        regex: /[^\\(\\)\"\\s]+/\n      }, {\n        token: 'storage.modifier',\n        regex: /\\(/,\n        next: 'start'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\)/\n      }, {\n        token: 'markup.raw',\n        regex: /^ */,\n        next: 'start'\n      }, {\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'string'\n      }]\n    };\n  };\n\n  oop.inherits(CirruHighlightRules, TextHighlightRules);\n  exports.CirruHighlightRules = CirruHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/cirru\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/cirru_highlight_rules\", \"ace/mode/folding/coffee\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var CirruHighlightRules = acequire(\"./cirru_highlight_rules\").CirruHighlightRules;\n  var CoffeeFoldMode = acequire(\"./folding/coffee\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = CirruHighlightRules;\n    this.foldingRules = new CoffeeFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.$id = \"ace/mode/cirru\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"mappings":"AAAA","sourceRoot":""}