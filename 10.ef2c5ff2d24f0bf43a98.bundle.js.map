{"version":3,"file":"10.ef2c5ff2d24f0bf43a98.bundle.js","sources":["webpack:///./fields/code/node_modules/brace/ext/beautify.js"],"sourcesContent":["ace.define(\"ace/ext/beautify/php_rules\", [\"require\", \"exports\", \"module\", \"ace/token_iterator\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var TokenIterator = acequire(\"ace/token_iterator\").TokenIterator;\n  exports.newLines = [{\n    type: 'support.php_tag',\n    value: '<?php'\n  }, {\n    type: 'support.php_tag',\n    value: '<?'\n  }, {\n    type: 'support.php_tag',\n    value: '?>'\n  }, {\n    type: 'paren.lparen',\n    value: '{',\n    indent: true\n  }, {\n    type: 'paren.rparen',\n    breakBefore: true,\n    value: '}',\n    indent: false\n  }, {\n    type: 'paren.rparen',\n    breakBefore: true,\n    value: '})',\n    indent: false,\n    dontBreak: true\n  }, {\n    type: 'comment'\n  }, {\n    type: 'text',\n    value: ';'\n  }, {\n    type: 'text',\n    value: ':',\n    context: 'php'\n  }, {\n    type: 'keyword',\n    value: 'case',\n    indent: true,\n    dontBreak: true\n  }, {\n    type: 'keyword',\n    value: 'default',\n    indent: true,\n    dontBreak: true\n  }, {\n    type: 'keyword',\n    value: 'break',\n    indent: false,\n    dontBreak: true\n  }, {\n    type: 'punctuation.doctype.end',\n    value: '>'\n  }, {\n    type: 'meta.tag.punctuation.end',\n    value: '>'\n  }, {\n    type: 'meta.tag.punctuation.begin',\n    value: '<',\n    blockTag: true,\n    indent: true,\n    dontBreak: true\n  }, {\n    type: 'meta.tag.punctuation.begin',\n    value: '</',\n    indent: false,\n    breakBefore: true,\n    dontBreak: true\n  }, {\n    type: 'punctuation.operator',\n    value: ';'\n  }];\n  exports.spaces = [{\n    type: 'xml-pe',\n    prepend: true\n  }, {\n    type: 'entity.other.attribute-name',\n    prepend: true\n  }, {\n    type: 'storage.type',\n    value: 'var',\n    append: true\n  }, {\n    type: 'storage.type',\n    value: 'function',\n    append: true\n  }, {\n    type: 'keyword.operator',\n    value: '='\n  }, {\n    type: 'keyword',\n    value: 'as',\n    prepend: true,\n    append: true\n  }, {\n    type: 'keyword',\n    value: 'function',\n    append: true\n  }, {\n    type: 'support.function',\n    next: /[^\\(]/,\n    append: true\n  }, {\n    type: 'keyword',\n    value: 'or',\n    append: true,\n    prepend: true\n  }, {\n    type: 'keyword',\n    value: 'and',\n    append: true,\n    prepend: true\n  }, {\n    type: 'keyword',\n    value: 'case',\n    append: true\n  }, {\n    type: 'keyword.operator',\n    value: '||',\n    append: true,\n    prepend: true\n  }, {\n    type: 'keyword.operator',\n    value: '&&',\n    append: true,\n    prepend: true\n  }];\n  exports.singleTags = ['!doctype', 'area', 'base', 'br', 'hr', 'input', 'img', 'link', 'meta'];\n\n  exports.transform = function (iterator, maxPos, context) {\n    var token = iterator.getCurrentToken();\n    var newLines = exports.newLines;\n    var spaces = exports.spaces;\n    var singleTags = exports.singleTags;\n    var code = '';\n    var indentation = 0;\n    var dontBreak = false;\n    var tag;\n    var lastTag;\n    var lastToken = {};\n    var nextTag;\n    var nextToken = {};\n    var breakAdded = false;\n    var value = '';\n\n    while (token !== null) {\n      console.log(token);\n\n      if (!token) {\n        token = iterator.stepForward();\n        continue;\n      }\n\n      if (token.type == 'support.php_tag' && token.value != '?>') {\n        context = 'php';\n      } else if (token.type == 'support.php_tag' && token.value == '?>') {\n        context = 'html';\n      } else if (token.type == 'meta.tag.name.style' && context != 'css') {\n        context = 'css';\n      } else if (token.type == 'meta.tag.name.style' && context == 'css') {\n        context = 'html';\n      } else if (token.type == 'meta.tag.name.script' && context != 'js') {\n        context = 'js';\n      } else if (token.type == 'meta.tag.name.script' && context == 'js') {\n        context = 'html';\n      }\n\n      nextToken = iterator.stepForward();\n\n      if (nextToken && nextToken.type.indexOf('meta.tag.name') == 0) {\n        nextTag = nextToken.value;\n      }\n\n      if (lastToken.type == 'support.php_tag' && lastToken.value == '<?=') {\n        dontBreak = true;\n      }\n\n      if (token.type == 'meta.tag.name') {\n        token.value = token.value.toLowerCase();\n      }\n\n      if (token.type == 'text') {\n        token.value = token.value.trim();\n      }\n\n      if (!token.value) {\n        token = nextToken;\n        continue;\n      }\n\n      value = token.value;\n\n      for (var i in spaces) {\n        if (token.type == spaces[i].type && (!spaces[i].value || token.value == spaces[i].value) && nextToken && (!spaces[i].next || spaces[i].next.test(nextToken.value))) {\n          if (spaces[i].prepend) {\n            value = ' ' + token.value;\n          }\n\n          if (spaces[i].append) {\n            value += ' ';\n          }\n        }\n      }\n\n      if (token.type.indexOf('meta.tag.name') == 0) {\n        tag = token.value;\n      }\n\n      breakAdded = false;\n\n      for (i in newLines) {\n        if (token.type == newLines[i].type && (!newLines[i].value || token.value == newLines[i].value) && (!newLines[i].blockTag || singleTags.indexOf(nextTag) === -1) && (!newLines[i].context || newLines[i].context === context)) {\n          if (newLines[i].indent === false) {\n            indentation--;\n          }\n\n          if (newLines[i].breakBefore && (!newLines[i].prev || newLines[i].prev.test(lastToken.value))) {\n            code += \"\\n\";\n            breakAdded = true;\n\n            for (i = 0; i < indentation; i++) {\n              code += \"\\t\";\n            }\n          }\n\n          break;\n        }\n      }\n\n      if (dontBreak === false) {\n        for (i in newLines) {\n          if (lastToken.type == newLines[i].type && (!newLines[i].value || lastToken.value == newLines[i].value) && (!newLines[i].blockTag || singleTags.indexOf(tag) === -1) && (!newLines[i].context || newLines[i].context === context)) {\n            if (newLines[i].indent === true) {\n              indentation++;\n            }\n\n            if (!newLines[i].dontBreak && !breakAdded) {\n              code += \"\\n\";\n\n              for (i = 0; i < indentation; i++) {\n                code += \"\\t\";\n              }\n            }\n\n            break;\n          }\n        }\n      }\n\n      code += value;\n\n      if (lastToken.type == 'support.php_tag' && lastToken.value == '?>') {\n        dontBreak = false;\n      }\n\n      lastTag = tag;\n      lastToken = token;\n      token = nextToken;\n\n      if (token === null) {\n        break;\n      }\n    }\n\n    return code;\n  };\n});\nace.define(\"ace/ext/beautify\", [\"require\", \"exports\", \"module\", \"ace/token_iterator\", \"ace/ext/beautify/php_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var TokenIterator = acequire(\"ace/token_iterator\").TokenIterator;\n  var phpTransform = acequire(\"./beautify/php_rules\").transform;\n\n  exports.beautify = function (session) {\n    var iterator = new TokenIterator(session, 0, 0);\n    var token = iterator.getCurrentToken();\n    var context = session.$modeId.split(\"/\").pop();\n    var code = phpTransform(iterator, context);\n    session.doc.setValue(code);\n  };\n\n  exports.commands = [{\n    name: \"beautify\",\n    exec: function exec(editor) {\n      exports.beautify(editor.session);\n    },\n    bindKey: \"Ctrl-Shift-B\"\n  }];\n});\n\n(function () {\n  ace.acequire([\"ace/ext/beautify\"], function () {});\n})();"],"mappings":"AAAA","sourceRoot":""}